return {}

-- [}]
-- return {
--   -- GitHub Copilot for completions
--   {
--     'github/copilot.vim',
--     event = 'InsertEnter',
--     config = function()
--       vim.g.copilot_no_tab_map = true
--       vim.g.copilot_filetypes = {
--         ['*'] = true,
--         ['TelescopePrompt'] = false,
--       }
--
--       -- Better keymaps to avoid conflicts with existing mappings
--       -- <C-j> is already used for snippet expansion in your config
--       vim.keymap.set('i', '<M-a>', 'copilot#Accept("")', {
--         expr = true,
--         replace_keycodes = false,
--         desc = 'Accept Copilot suggestion',
--       })
--
--       vim.keymap.set('i', '<M-w>', '<Plug>(copilot-accept-word)', {
--         desc = 'Accept Copilot word',
--       })
--
--       vim.keymap.set('i', '<M-]>', '<Plug>(copilot-next)', {
--         desc = 'Next Copilot suggestion',
--       })
--
--       vim.keymap.set('i', '<M-[>', '<Plug>(copilot-previous)', {
--         desc = 'Previous Copilot suggestion',
--       })
--     end,
--   },
--
--   -- CopilotChat with organized keymaps
--   {
--     'CopilotC-Nvim/CopilotChat.nvim',
--     branch = 'main',
--     dependencies = {
--       { 'github/copilot.vim' },
--       { 'nvim-lua/plenary.nvim' },
--     },
--     build = 'make tiktoken',
--     opts = {
--       debug = false,
--       model = 'gpt-4.1',
--       window = {
--         layout = 'vertical',
--         width = 0.4,
--         height = 0.5,
--         relative = 'editor',
--         border = 'rounded',
--       },
--       auto_follow_cursor = true,
--       auto_insert_mode = false,
--       mappings = {
--         complete = {
--           detail = 'Use @<Tab> or /<Tab> for options.',
--           insert = '<Tab>',
--         },
--         close = {
--           normal = 'q',
--           insert = '<C-c>',
--         },
--         reset = {
--           normal = '<C-x>',
--           insert = '<C-x>',
--         },
--         submit_prompt = {
--           normal = '<CR>',
--           insert = '<C-m>',
--         },
--         accept_diff = {
--           normal = '<C-y>',
--           insert = '<C-y>',
--         },
--         yank_diff = {
--           normal = 'gy',
--         },
--         show_diff = {
--           normal = 'gd',
--         },
--       },
--     },
--     config = function(_, opts)
--       require('CopilotChat').setup(opts)
--
--       local keymap = vim.keymap.set
--
--       -- === Core Chat Operations (Most Used) ===
--       keymap({ 'n', 'v' }, '<leader>aa', '<cmd>CopilotChatToggle<CR>', { desc = '[A]I Ch[a]t Toggle' })
--
--       keymap({ 'n', 'v' }, '<leader>ac', function()
--         local input = vim.fn.input 'AI: '
--         if input ~= '' then
--           require('CopilotChat').ask(input)
--         end
--       end, { desc = '[A]I [C]hat' })
--
--       -- === Quick Actions (Visual Mode) ===
--       keymap('v', '<leader>ae', '<cmd>CopilotChatExplain<CR>', { desc = '[A]I [E]xplain' })
--       keymap('v', '<leader>af', '<cmd>CopilotChatFix<CR>', { desc = '[A]I [F]ix' })
--       keymap('v', '<leader>ar', '<cmd>CopilotChatReview<CR>', { desc = '[A]I [R]eview' })
--       keymap('v', '<leader>ao', '<cmd>CopilotChatOptimize<CR>', { desc = '[A]I [O]ptimize' })
--       keymap('v', '<leader>ad', '<cmd>CopilotChatDocs<CR>', { desc = '[A]I [D]ocument' })
--       keymap('v', '<leader>at', '<cmd>CopilotChatTests<CR>', { desc = '[A]I [T]ests' })
--
--       -- === Inline Assistant (Quick Access) ===
--       keymap({ 'n', 'v' }, '<leader>ai', function()
--         require('CopilotChat').ask('', {
--           selection = require('CopilotChat.select').visual,
--           window = {
--             layout = 'float',
--             relative = 'cursor',
--             width = 1,
--             height = 0.4,
--             row = 1,
--           },
--         })
--       end, { desc = '[A]I [I]nline' })
--
--       -- === Code Quality & Analysis ===
--       keymap('n', '<leader>aq', function()
--         require('CopilotChat').ask(
--           'Review this code for quality issues, security vulnerabilities, and performance concerns.',
--           { selection = require('CopilotChat.select').buffer }
--         )
--       end, { desc = '[A]I [Q]uality Review' })
--
--       keymap('v', '<leader>an', function()
--         require('CopilotChat').ask(
--           'Suggest better variable names for this code. Be concise and explain why.',
--           { selection = require('CopilotChat.select').visual }
--         )
--       end, { desc = '[A]I Better [N]ames' })
--
--       -- === Git Integration ===
--       keymap('n', '<leader>ag', '<cmd>CopilotChatCommitStaged<CR>', { desc = '[A]I [G]it Commit' })
--
--       -- === Advanced Features Menu ===
--       keymap('n', '<leader>am', function()
--         local actions = {
--           {
--             'Prompt Actions',
--             function()
--               local acts = require 'CopilotChat.actions'
--               require('CopilotChat.integrations.telescope').pick(acts.prompt_actions())
--             end,
--           },
--           {
--             'Help Actions',
--             function()
--               local acts = require 'CopilotChat.actions'
--               require('CopilotChat.integrations.telescope').pick(acts.help_actions())
--             end,
--           },
--           {
--             'Buffer Analysis',
--             function()
--               require('CopilotChat').ask('Analyze this file structure and suggest improvements.', { selection = require('CopilotChat.select').buffer })
--             end,
--           },
--           {
--             'Fix Diagnostics',
--             function()
--               require('CopilotChat').ask('Please fix the diagnostic issues in this file.', { selection = require('CopilotChat.select').diagnostics })
--             end,
--           },
--           {
--             'Reset Chat',
--             function()
--               require('CopilotChat').reset()
--             end,
--           },
--         }
--
--         vim.ui.select(actions, {
--           prompt = 'AI Actions:',
--           format_item = function(item)
--             return item[1]
--           end,
--         }, function(choice)
--           if choice then
--             choice[2]()
--           end
--         end)
--       end, { desc = '[A]I [M]enu' })
--
--       -- === Context-Aware Helper ===
--       keymap('n', '<leader>ah', function()
--         local ft = vim.bo.filetype
--         local prompts = {
--           go = 'Review for Go best practices: error handling, concurrency, and performance.',
--           python = 'Review for Python best practices: PEP 8, type hints, and Pythonic patterns.',
--           javascript = 'Review for JS best practices: ES6+, async patterns, and performance.',
--           typescript = 'Review for TS best practices: type safety, interfaces, and modern patterns.',
--           lua = 'Review for Lua/Neovim best practices and performance.',
--           default = 'Review this code for best practices and improvements.',
--         }
--
--         local prompt = prompts[ft] or prompts.default
--         require('CopilotChat').ask(prompt, { selection = require('CopilotChat.select').buffer })
--       end, { desc = '[A]I [H]elp (Context)' })
--
--       -- === Quick Problem Solver ===
--       keymap('n', '<leader>a?', function()
--         local line = vim.fn.line '.'
--         local col = vim.fn.col '.'
--         local word = vim.fn.expand '<cword>'
--
--         -- Get current line content
--         local line_content = vim.api.nvim_buf_get_lines(0, line - 1, line, false)[1]
--
--         -- Get any diagnostics on current line
--         local diagnostics = vim.diagnostic.get(0, { lnum = line - 1 })
--         local diag_msg = ''
--         if #diagnostics > 0 then
--           diag_msg = '\nDiagnostics: ' .. diagnostics[1].message
--         end
--
--         local context = string.format('Line %d: %s\nWord under cursor: %s%s', line, line_content, word, diag_msg)
--
--         require('CopilotChat').ask('Help me fix this issue:\n\n' .. context .. '\n\nProvide a concise solution.', {
--           window = {
--             layout = 'float',
--             relative = 'cursor',
--             width = 0.8,
--             height = 0.5,
--             row = 1,
--           },
--         })
--       end, { desc = '[A]I [?] Quick Help' })
--
--       -- === Workspace Commands ===
--       keymap('n', '<leader>aw', function()
--         vim.ui.select({
--           'Generate Tests',
--           'Generate Documentation',
--           'Refactor Code',
--           'Security Review',
--           'Performance Analysis',
--           'Tech Debt Analysis',
--         }, {
--           prompt = 'AI Workspace Action:',
--         }, function(choice)
--           local actions = {
--             ['Generate Tests'] = 'Generate comprehensive unit tests with edge cases.',
--             ['Generate Documentation'] = 'Generate detailed documentation with examples.',
--             ['Refactor Code'] = 'Suggest refactoring to improve maintainability.',
--             ['Security Review'] = 'Review for security vulnerabilities.',
--             ['Performance Analysis'] = 'Analyze performance bottlenecks and suggest optimizations.',
--             ['Tech Debt Analysis'] = 'Identify technical debt and prioritize fixes.',
--           }
--
--           if choice and actions[choice] then
--             require('CopilotChat').ask(actions[choice], { selection = require('CopilotChat.select').buffer })
--           end
--         end)
--       end, { desc = '[A]I [W]orkspace Actions' })
--
--       -- === Model Selection ===
--       keymap('n', '<leader>aM', function()
--         local models = { 'gpt-4.1', 'gpt-3.5-turbo', 'claude-sonnet-4' }
--         vim.ui.select(models, {
--           prompt = 'Select AI Model:',
--         }, function(choice)
--           if choice then
--             require('CopilotChat').setup { model = choice }
--             vim.notify('AI Model: ' .. choice, vim.log.levels.INFO)
--           end
--         end)
--       end, { desc = '[A]I [M]odel Select' })
--
--       -- === Custom User Commands ===
--       vim.api.nvim_create_user_command('AI', function(args)
--         require('CopilotChat').ask(args.args)
--       end, { nargs = '+', desc = 'Quick AI chat command' })
--
--       vim.api.nvim_create_user_command('AICode', function()
--         require('CopilotChat').ask(
--           'Review this code and suggest improvements. Focus on clarity, performance, and maintainability.',
--           { selection = require('CopilotChat.select').buffer }
--         )
--       end, { desc = 'AI code review' })
--
--       vim.api.nvim_create_user_command('AIDiff', function()
--         local diff = vim.fn.system 'git diff --cached'
--         if diff == '' then
--           diff = vim.fn.system 'git diff HEAD'
--         end
--         if diff ~= '' then
--           require('CopilotChat').ask('Review these changes and suggest improvements:\n\n' .. diff)
--         else
--           vim.notify('No git changes found', vim.log.levels.WARN)
--         end
--       end, { desc = 'AI review git diff' })
--
--       -- === Status Line Integration ===
--       vim.g.copilot_chat_model = 'gpt-4'
--
--       -- === Auto Commands ===
--       -- Show AI suggestions for diagnostics on cursor hold
--       local ai_diagnostic_group = vim.api.nvim_create_augroup('ai_diagnostic_help', { clear = true })
--       vim.api.nvim_create_autocmd('CursorHold', {
--         group = ai_diagnostic_group,
--         callback = function()
--           local diagnostics = vim.diagnostic.get(0, { lnum = vim.fn.line '.' - 1 })
--           if #diagnostics > 0 and vim.g.ai_auto_diagnostic_help then
--             -- This is opt-in via :let g:ai_auto_diagnostic_help = 1
--             vim.notify('AI help available: <leader>a?', vim.log.levels.INFO)
--           end
--         end,
--       })
--     end,
--     -- Lazy load on any AI command
--     cmd = { 'CopilotChat', 'AI', 'AICode', 'AIDiff' },
--     keys = {
--       { '<leader>a', desc = '+[A]I', mode = { 'n', 'v' } },
--     },
--   },
--
--   -- Which-key integration
--   {
--     'folke/which-key.nvim',
--     optional = true,
--     opts = {
--       spec = {
--         { '<leader>a', group = '[A]I Assistant', mode = { 'n', 'v' } },
--       },
--     },
--   },
-- }
